#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_NV_ray_tracing : require
#include "RayCommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(location = 0) rayPayloadNV RP hitValue;

#define LOOP 3
#define PixelRay 1
vec3 HDR2LDR(vec3 color)
{
    float a=0.7;
    float b=1.0;
    vec3 left=color;
    vec3 right=(a*a-b*color)/(2.0*a-b-color);
    color.x=color.x<=a?left.x:right.x;
    color.y=color.y<=a?left.y:right.y;
    color.z=color.z<=a?left.z:right.z;
    return sqrt(color);
}
void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;
    vec3 record[LOOP];
    for (int i = 0; i < LOOP; i++) {
        record[i] = vec3(0);
    }
    vec3 result = vec3(0.0, 0.0, 0.0);
    for (int r = 0; r < PixelRay; r++) {
        hitValue.position = origin.xyz;
        hitValue.direction = direction.xyz;
        hitValue.kS=vec3(1.0);
        hitValue.bias = float(r*10.0);
        for (int i = 0; i < LOOP; i++) {
            vec3 kS=hitValue.kS;
            traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, hitValue.position, tmin, hitValue.direction, tmax, 0);
            if (hitValue.color.x < 0) {
                break;
            }
            record[i] = hitValue.color + 0.;
            result += record[i]*abs(kS);
            // hitValue.kS+=1.8;
            // hitValue.kS=vec3(1.0);
            // hitValue.kS*=3.0;
        }
    }
    result /= float(PixelRay);
    // result = result / (result + vec3(1.0));
    // result = pow(result, vec3(1.0 / 2.2));
    // result.xyz=sqrt(result.xyz/(1.0+result.xyz));
    result=HDR2LDR(result);
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(result, 0.0));
}
